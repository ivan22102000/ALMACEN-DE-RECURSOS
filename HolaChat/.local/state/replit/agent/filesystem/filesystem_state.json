{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nKIVO Store is a comprehensive e-commerce platform designed for the Bolivian market, featuring a unique loyalty system based on token-like \"fichas\" (chips) that function similarly to Bitcoin. The system generates dynamic QR codes printed on labels (18mm format) that customers can redeem for discounts. The application is built as a full-stack web solution with a React frontend and Express backend, utilizing PostgreSQL for data persistence and Cloudinary for image storage.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library in \"new-york\" style\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Theme**: Custom violet (#6C63FF) and white (#FFFFFF) color scheme with Arial font\n- **Responsive Design**: Mobile-first approach with collapsible tables and adaptive layouts\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: JWT-based authentication for admin panel access\n- **Security**: bcrypt for password hashing, SHA-256 for token encryption\n- **File Handling**: Server-side image upload processing with Cloudinary integration\n- **API Design**: RESTful endpoints with proper error handling and validation using Zod\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon serverless (500MB limit on free tier)\n- **Image Storage**: Cloudinary for product images (25GB free tier, organized in `kivo/productos` folder)\n- **Session Management**: Browser localStorage for cart sessions and temporary data\n- **Database Schema**: Comprehensive schema including users, products, categories, promotions, loyalty tokens (fichas), cart items, and audit logs\n\n## Authentication and Authorization\n- **Admin Authentication**: JWT tokens with role-based access control\n- **Default Admin**: Email `admin@kivo.com` with bcrypt-hashed password\n- **Protected Routes**: Admin panel restricted to users with `es_administrador = true`\n- **Token Management**: Secure token storage and validation middleware\n- **Audit Logging**: All sensitive actions logged for security tracking\n\n## Key Features\n- **Loyalty System**: QR code-based \"fichas\" system for customer rewards\n- **Product Management**: Full CRUD operations for products with image uploads\n- **Shopping Cart**: Session-based cart functionality with persistent storage\n- **Promotions**: Time-limited discount system with countdown timers\n- **Multi-language**: Spanish-first interface designed for Bolivian users\n- **Cost Optimization**: Automatic database cleanup to stay within free tier limits\n\n## Performance Optimizations\n- **Pagination**: 10-20 records per query to optimize load times\n- **Caching**: TanStack Query for intelligent client-side caching\n- **Image Optimization**: Cloudinary transforms for responsive images\n- **Database Maintenance**: Automated cleanup of expired tokens and archived orders\n- **Connection Management**: Keep-alive pings to prevent database hibernation\n\n# External Dependencies\n\n## Third-party Services\n- **Neon Database**: PostgreSQL hosting (500MB, 1GB bandwidth/month free tier)\n- **Cloudinary**: Image storage and processing (25GB storage, transformation APIs)\n- **Vercel**: Frontend deployment and hosting\n- **Render**: Backend API hosting with cron job support (750 hours/month free)\n\n## Key Libraries\n- **Database**: Drizzle ORM, postgres driver, @neondatabase/serverless\n- **Authentication**: bcrypt, jsonwebtoken\n- **Frontend UI**: @radix-ui components, @tanstack/react-query, wouter\n- **Validation**: Zod for form and API validation\n- **QR Code Generation**: qrcode library for loyalty token generation\n- **Styling**: Tailwind CSS, class-variance-authority, clsx\n- **Development**: TypeScript, Vite, tsx for development server\n\n## API Integrations\n- **Cloudinary API**: Unsigned upload preset for direct image uploads\n- **Database API**: Direct PostgreSQL connections via connection string\n- **Payment Processing**: Designed to integrate with local Bolivian payment providers\n- **QR Code Scanning**: Browser-based camera access for token redemption","size_bytes":4351},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'kivo-violet': '#6C63FF',\n        'kivo-white': '#FFFFFF',\n      },\n      fontFamily: {\n        sans: [\"Arial\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.7\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3053},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertProductoSchema, insertPromocionSchema, insertPedidoSchema, insertCarritoSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport QRCode from \"qrcode\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"kivo-super-secret-key\";\n\n// Middleware de autenticación para admin\nconst authenticateAdmin = async (req: any, res: any, next: any) => {\n  const token = req.headers.authorization?.split(' ')[1];\n  \n  if (!token) {\n    return res.status(401).json({ message: \"Token requerido\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUserById(decoded.userId);\n    \n    if (!user || !user.es_administrador) {\n      return res.status(403).json({ message: \"Acceso denegado\" });\n    }\n    \n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Token inválido\" });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Inicializar usuario admin por defecto\n  try {\n    const adminExists = await storage.getUserByEmail(\"admin@kivo.com\");\n    if (!adminExists) {\n      const hashedPassword = await bcrypt.hash(\"password\", 10);\n      await storage.createUser({\n        email: \"admin@kivo.com\",\n        password: hashedPassword,\n        nombre: \"Administrador\",\n        es_administrador: true,\n      });\n    }\n  } catch (error) {\n    console.error(\"Error inicializando admin:\", error);\n  }\n\n  // ===================\n  // RUTAS DE AUTENTICACIÓN\n  // ===================\n  \n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Credenciales inválidas\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Credenciales inválidas\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"24h\" });\n      \n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          email: user.email, \n          nombre: user.nombre, \n          es_administrador: user.es_administrador \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE PRODUCTOS\n  // ===================\n  \n  app.get(\"/api/productos\", async (req, res) => {\n    try {\n      const { busqueda, categoria, ordenar } = req.query;\n      const productos = await storage.getProductos({ \n        busqueda: busqueda as string, \n        categoria: categoria as string, \n        ordenar: ordenar as string \n      });\n      res.json(productos);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo productos\" });\n    }\n  });\n\n  app.get(\"/api/productos/ofertas\", async (req, res) => {\n    try {\n      const productos = await storage.getProductosEnOferta();\n      res.json(productos);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo productos en oferta\" });\n    }\n  });\n\n  app.get(\"/api/productos/admin\", authenticateAdmin, async (req, res) => {\n    try {\n      const productos = await storage.getProductosAdmin();\n      res.json(productos);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo productos\" });\n    }\n  });\n\n  app.post(\"/api/productos\", authenticateAdmin, async (req, res) => {\n    try {\n      const validatedData = insertProductoSchema.parse(req.body);\n      const producto = await storage.createProducto(validatedData);\n      res.status(201).json(producto);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creando producto\" });\n    }\n  });\n\n  app.patch(\"/api/productos/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertProductoSchema.partial().parse(req.body);\n      const producto = await storage.updateProducto(id, validatedData);\n      res.json(producto);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error actualizando producto\" });\n    }\n  });\n\n  app.delete(\"/api/productos/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProducto(id);\n      res.json({ message: \"Producto eliminado\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error eliminando producto\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE CATEGORÍAS\n  // ===================\n  \n  app.get(\"/api/categorias\", async (req, res) => {\n    try {\n      const categorias = await storage.getCategorias();\n      res.json(categorias);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo categorías\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE PROMOCIONES\n  // ===================\n  \n  app.get(\"/api/promociones/admin\", authenticateAdmin, async (req, res) => {\n    try {\n      const promociones = await storage.getPromocionesAdmin();\n      res.json(promociones);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo promociones\" });\n    }\n  });\n\n  app.post(\"/api/promociones\", authenticateAdmin, async (req, res) => {\n    try {\n      const validatedData = insertPromocionSchema.parse(req.body);\n      const promocion = await storage.createPromocion(validatedData);\n      res.status(201).json(promocion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creando promoción\" });\n    }\n  });\n\n  app.patch(\"/api/promociones/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPromocionSchema.partial().parse(req.body);\n      const promocion = await storage.updatePromocion(id, validatedData);\n      res.json(promocion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error actualizando promoción\" });\n    }\n  });\n\n  app.delete(\"/api/promociones/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePromocion(id);\n      res.json({ message: \"Promoción eliminada\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error eliminando promoción\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE CARRITO\n  // ===================\n  \n  app.get(\"/api/carrito/:sesionId\", async (req, res) => {\n    try {\n      const { sesionId } = req.params;\n      const items = await storage.getCarritoItems(sesionId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo carrito\" });\n    }\n  });\n\n  app.post(\"/api/carrito\", async (req, res) => {\n    try {\n      const validatedData = insertCarritoSchema.parse(req.body);\n      const item = await storage.addToCarrito(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error agregando al carrito\" });\n    }\n  });\n\n  app.patch(\"/api/carrito/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { cantidad } = req.body;\n      const item = await storage.updateCarritoItem(id, cantidad);\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Error actualizando carrito\" });\n    }\n  });\n\n  app.delete(\"/api/carrito/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.removeFromCarrito(id);\n      res.json({ message: \"Item eliminado del carrito\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error eliminando del carrito\" });\n    }\n  });\n\n  app.delete(\"/api/carrito/sesion/:sesionId\", async (req, res) => {\n    try {\n      const { sesionId } = req.params;\n      await storage.clearCarrito(sesionId);\n      res.json({ message: \"Carrito vaciado\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error vaciando carrito\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE PEDIDOS\n  // ===================\n  \n  app.post(\"/api/pedidos\", async (req, res) => {\n    try {\n      const validatedData = insertPedidoSchema.parse(req.body);\n      const { sesion_id, ...pedidoData } = req.body;\n      \n      // Obtener items del carrito\n      const carritoItems = await storage.getCarritoItems(sesion_id);\n      if (carritoItems.length === 0) {\n        return res.status(400).json({ message: \"El carrito está vacío\" });\n      }\n\n      // Crear pedido\n      const pedido = await storage.createPedido({\n        ...pedidoData,\n        total: carritoItems.reduce((sum, item) => sum + (parseFloat(item.producto.precio) * item.cantidad), 0).toString()\n      });\n\n      // Crear detalles del pedido\n      for (const item of carritoItems) {\n        await storage.createDetallePedido({\n          pedido_id: pedido.id,\n          producto_id: item.producto_id,\n          cantidad: item.cantidad,\n          precio_unitario: item.producto.precio,\n          descuento_aplicado: \"0\"\n        });\n      }\n\n      // Limpiar carrito\n      await storage.clearCarrito(sesion_id);\n\n      res.status(201).json(pedido);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Datos inválidos\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creando pedido\" });\n    }\n  });\n\n  // ===================\n  // RUTAS DE FICHAS\n  // ===================\n  \n  app.get(\"/api/admin/fichas\", authenticateAdmin, async (req, res) => {\n    try {\n      const { estado, fecha, busqueda } = req.query;\n      const fichas = await storage.getHistorialFichas({ \n        estado: estado as string, \n        fecha: fecha as string, \n        busqueda: busqueda as string \n      });\n      res.json(fichas);\n    } catch (error) {\n      res.status(500).json({ message: \"Error obteniendo historial de fichas\" });\n    }\n  });\n\n  app.post(\"/api/admin/fichas/generar\", authenticateAdmin, async (req, res) => {\n    try {\n      const { codigo_compra } = req.body;\n      \n      // Verificar que el pedido existe\n      const pedido = await storage.getPedidoByCodigo(codigo_compra);\n      if (!pedido) {\n        return res.status(404).json({ message: \"Pedido no encontrado\" });\n      }\n\n      // Verificar que no existe ya una ficha\n      const fichaExistente = await storage.getFichaByCodigo(codigo_compra);\n      if (fichaExistente) {\n        return res.status(400).json({ message: \"Ya existe una ficha para este pedido\" });\n      }\n\n      // Generar token único\n      const token = crypto.randomBytes(16).toString('hex');\n      const tokenEncriptado = crypto.createHash('sha256').update(token).digest('hex');\n\n      // Crear ficha\n      const ficha = await storage.createFicha({\n        codigo_compra,\n        token,\n        token_encriptado: tokenEncriptado,\n        estado: \"activo\",\n        fecha_expiracion: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 días\n      });\n\n      // Generar QR\n      const qrData = JSON.stringify({ cod_ficha: token, cod_compra: codigo_compra });\n      const qrImage = await QRCode.toDataURL(qrData, { \n        width: 150, \n        margin: 1, \n        color: { dark: '#000000', light: '#FFFFFF' } \n      });\n\n      res.json({ ficha, qrImage });\n    } catch (error) {\n      res.status(500).json({ message: \"Error generando ficha\" });\n    }\n  });\n\n  app.post(\"/api/fichas/validar\", async (req, res) => {\n    try {\n      const { codigo_compra } = req.body;\n      \n      const ficha = await storage.getFichaByCodigo(codigo_compra);\n      if (!ficha) {\n        return res.status(404).json({ message: \"Ficha no encontrada\" });\n      }\n\n      if (ficha.estado !== 'activo') {\n        return res.status(400).json({ message: \"La ficha ya fue canjeada o está expirada\" });\n      }\n\n      if (new Date(ficha.fecha_expiracion) < new Date()) {\n        await storage.updateFicha(ficha.id, { estado: 'expirado' });\n        return res.status(400).json({ message: \"La ficha ha expirado\" });\n      }\n\n      res.json(ficha);\n    } catch (error) {\n      res.status(500).json({ message: \"Error validando ficha\" });\n    }\n  });\n\n  app.post(\"/api/fichas/canjear\", async (req, res) => {\n    try {\n      const { codigo_compra } = req.body;\n      \n      const ficha = await storage.getFichaByCodigo(codigo_compra);\n      if (!ficha || ficha.estado !== 'activo') {\n        return res.status(404).json({ message: \"Ficha no válida\" });\n      }\n\n      // Actualizar estado de la ficha\n      await storage.updateFicha(ficha.id, { \n        estado: 'canjeado',\n        canjeado_en: new Date()\n      });\n\n      res.json({ \n        message: \"Ficha canjeada exitosamente\",\n        descuento_aplicado: 10 // 10% de descuento por defecto\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Error canjeando ficha\" });\n    }\n  });\n\n  app.post(\"/api/admin/fichas/canjear-manual\", authenticateAdmin, async (req, res) => {\n    try {\n      const { codigo_compra } = req.body;\n      \n      const ficha = await storage.getFichaByCodigo(codigo_compra);\n      if (!ficha || ficha.estado !== 'activo') {\n        return res.status(404).json({ message: \"Ficha no válida\" });\n      }\n\n      await storage.updateFicha(ficha.id, { \n        estado: 'canjeado',\n        canjeado_en: new Date()\n      });\n\n      res.json({ message: \"Ficha canjeada manualmente\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error canjeando ficha manualmente\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14396},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, desc, asc, like, and, or, gte, lte } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport type { \n  Usuario, InsertUsuario, \n  Producto, InsertProducto,\n  Promocion, InsertPromocion,\n  Pedido, InsertPedido,\n  Ficha, InsertFicha,\n  CarritoItem, InsertCarritoItem\n} from \"@shared/schema\";\nimport crypto from \"crypto\";\n\nconst connectionString = process.env.DATABASE_URL;\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL no está configurada\");\n}\n\nconst client = postgres(connectionString);\nconst db = drizzle(client, { schema });\n\nexport interface IStorage {\n  // Usuarios\n  getUserById(id: string): Promise<Usuario | undefined>;\n  getUserByEmail(email: string): Promise<Usuario | undefined>;\n  createUser(user: InsertUsuario): Promise<Usuario>;\n\n  // Productos\n  getProductos(filtros?: { busqueda?: string; categoria?: string; ordenar?: string }): Promise<any[]>;\n  getProductosEnOferta(): Promise<any[]>;\n  getProductosAdmin(): Promise<any[]>;\n  createProducto(producto: InsertProducto): Promise<Producto>;\n  updateProducto(id: string, datos: Partial<InsertProducto>): Promise<Producto>;\n  deleteProducto(id: string): Promise<void>;\n\n  // Categorías\n  getCategorias(): Promise<any[]>;\n\n  // Promociones\n  getPromocionesAdmin(): Promise<any[]>;\n  createPromocion(promocion: InsertPromocion): Promise<Promocion>;\n  updatePromocion(id: string, datos: Partial<InsertPromocion>): Promise<Promocion>;\n  deletePromocion(id: string): Promise<void>;\n\n  // Carrito\n  getCarritoItems(sesionId: string): Promise<any[]>;\n  addToCarrito(item: InsertCarritoItem): Promise<CarritoItem>;\n  updateCarritoItem(id: string, cantidad: number): Promise<CarritoItem>;\n  removeFromCarrito(id: string): Promise<void>;\n  clearCarrito(sesionId: string): Promise<void>;\n\n  // Pedidos\n  createPedido(pedido: InsertPedido): Promise<Pedido>;\n  createDetallePedido(detalle: any): Promise<any>;\n  getPedidoByCodigo(codigo: string): Promise<Pedido | undefined>;\n\n  // Fichas\n  getHistorialFichas(filtros?: { estado?: string; fecha?: string; busqueda?: string }): Promise<any[]>;\n  getFichaByCodigo(codigo: string): Promise<Ficha | undefined>;\n  createFicha(ficha: InsertFicha): Promise<Ficha>;\n  updateFicha(id: string, datos: Partial<InsertFicha>): Promise<Ficha>;\n}\n\nexport class PostgresStorage implements IStorage {\n  \n  // ===================\n  // MÉTODOS DE USUARIOS\n  // ===================\n  \n  async getUserById(id: string): Promise<Usuario | undefined> {\n    const result = await db.select().from(schema.usuarios).where(eq(schema.usuarios.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<Usuario | undefined> {\n    const result = await db.select().from(schema.usuarios).where(eq(schema.usuarios.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUsuario): Promise<Usuario> {\n    const result = await db.insert(schema.usuarios).values(user).returning();\n    return result[0];\n  }\n\n  // ===================\n  // MÉTODOS DE PRODUCTOS\n  // ===================\n  \n  async getProductos(filtros?: { busqueda?: string; categoria?: string; ordenar?: string }): Promise<any[]> {\n    // Construir condiciones\n    const condiciones = [eq(schema.productos.activo, true)];\n    \n    if (filtros?.busqueda) {\n      condiciones.push(like(schema.productos.nombre, `%${filtros.busqueda}%`));\n    }\n\n    if (filtros?.categoria) {\n      condiciones.push(eq(schema.productos.categoria_id, filtros.categoria));\n    }\n\n    // Construir la query base\n    let query = db\n      .select({\n        id: schema.productos.id,\n        nombre: schema.productos.nombre,\n        descripcion: schema.productos.descripcion,\n        precio: schema.productos.precio,\n        stock: schema.productos.stock,\n        activo: schema.productos.activo,\n        creado_en: schema.productos.creado_en,\n      })\n      .from(schema.productos)\n      .where(and(...condiciones));\n\n    // Aplicar ordenamiento\n    switch (filtros?.ordenar) {\n      case 'precio_asc':\n        query = query.orderBy(asc(schema.productos.precio));\n        break;\n      case 'precio_desc':\n        query = query.orderBy(desc(schema.productos.precio));\n        break;\n      case 'nombre_asc':\n        query = query.orderBy(asc(schema.productos.nombre));\n        break;\n      case 'nombre_desc':\n        query = query.orderBy(desc(schema.productos.nombre));\n        break;\n      default:\n        query = query.orderBy(desc(schema.productos.creado_en));\n    }\n\n    const productos = await query;\n\n    // Obtener imágenes y promociones para cada producto\n    const productosConDetalles = await Promise.all(\n      productos.map(async (producto) => {\n        const imagenes = await db\n          .select()\n          .from(schema.imagenes_productos)\n          .where(eq(schema.imagenes_productos.producto_id, producto.id));\n\n        const promociones = await db\n          .select()\n          .from(schema.promociones)\n          .where(\n            and(\n              eq(schema.promociones.producto_id, producto.id),\n              eq(schema.promociones.activa, true),\n              gte(schema.promociones.fecha_fin, new Date())\n            )\n          );\n\n        return {\n          ...producto,\n          imagenes_productos: imagenes,\n          promociones: promociones,\n        };\n      })\n    );\n\n    return productosConDetalles;\n  }\n\n  async getProductosEnOferta(): Promise<any[]> {\n    const promocionesActivas = await db\n      .select({\n        producto_id: schema.promociones.producto_id,\n        porcentaje_descuento: schema.promociones.porcentaje_descuento,\n        fecha_fin: schema.promociones.fecha_fin,\n      })\n      .from(schema.promociones)\n      .where(\n        and(\n          eq(schema.promociones.activa, true),\n          gte(schema.promociones.fecha_fin, new Date())\n        )\n      );\n\n    if (promocionesActivas.length === 0) {\n      return [];\n    }\n\n    const productosIds = promocionesActivas.map(p => p.producto_id).filter(Boolean);\n    \n    const productos = await db\n      .select()\n      .from(schema.productos)\n      .where(\n        and(\n          eq(schema.productos.activo, true),\n          or(...productosIds.map(id => eq(schema.productos.id, id!)))\n        )\n      );\n\n    const productosConDetalles = await Promise.all(\n      productos.map(async (producto) => {\n        const imagenes = await db\n          .select()\n          .from(schema.imagenes_productos)\n          .where(eq(schema.imagenes_productos.producto_id, producto.id));\n\n        const promociones = await db\n          .select()\n          .from(schema.promociones)\n          .where(\n            and(\n              eq(schema.promociones.producto_id, producto.id),\n              eq(schema.promociones.activa, true),\n              gte(schema.promociones.fecha_fin, new Date())\n            )\n          );\n\n        return {\n          ...producto,\n          imagenes_productos: imagenes,\n          promociones: promociones,\n        };\n      })\n    );\n\n    return productosConDetalles;\n  }\n\n  async getProductosAdmin(): Promise<any[]> {\n    const productos = await db\n      .select()\n      .from(schema.productos)\n      .orderBy(desc(schema.productos.creado_en));\n\n    const productosConDetalles = await Promise.all(\n      productos.map(async (producto) => {\n        const imagenes = await db\n          .select()\n          .from(schema.imagenes_productos)\n          .where(eq(schema.imagenes_productos.producto_id, producto.id));\n\n        const categoria = producto.categoria_id ? await db\n          .select()\n          .from(schema.categorias)\n          .where(eq(schema.categorias.id, producto.categoria_id))\n          .limit(1) : [];\n\n        return {\n          ...producto,\n          imagenes_productos: imagenes,\n          categoria: categoria[0] || null,\n        };\n      })\n    );\n\n    return productosConDetalles;\n  }\n\n  async createProducto(producto: InsertProducto): Promise<Producto> {\n    const result = await db.insert(schema.productos).values(producto).returning();\n    return result[0];\n  }\n\n  async updateProducto(id: string, datos: Partial<InsertProducto>): Promise<Producto> {\n    const result = await db\n      .update(schema.productos)\n      .set(datos)\n      .where(eq(schema.productos.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProducto(id: string): Promise<void> {\n    await db.delete(schema.productos).where(eq(schema.productos.id, id));\n  }\n\n  // ===================\n  // MÉTODOS DE CATEGORÍAS\n  // ===================\n  \n  async getCategorias(): Promise<any[]> {\n    return await db\n      .select()\n      .from(schema.categorias)\n      .where(eq(schema.categorias.activa, true))\n      .orderBy(asc(schema.categorias.nombre));\n  }\n\n  // ===================\n  // MÉTODOS DE PROMOCIONES\n  // ===================\n  \n  async getPromocionesAdmin(): Promise<any[]> {\n    const promociones = await db\n      .select()\n      .from(schema.promociones)\n      .orderBy(desc(schema.promociones.creado_en));\n\n    const promocionesConProducto = await Promise.all(\n      promociones.map(async (promocion) => {\n        const producto = promocion.producto_id ? await db\n          .select()\n          .from(schema.productos)\n          .where(eq(schema.productos.id, promocion.producto_id))\n          .limit(1) : [];\n\n        return {\n          ...promocion,\n          producto: producto[0] || null,\n        };\n      })\n    );\n\n    return promocionesConProducto;\n  }\n\n  async createPromocion(promocion: InsertPromocion): Promise<Promocion> {\n    const result = await db.insert(schema.promociones).values(promocion).returning();\n    return result[0];\n  }\n\n  async updatePromocion(id: string, datos: Partial<InsertPromocion>): Promise<Promocion> {\n    const result = await db\n      .update(schema.promociones)\n      .set(datos)\n      .where(eq(schema.promociones.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePromocion(id: string): Promise<void> {\n    await db.delete(schema.promociones).where(eq(schema.promociones.id, id));\n  }\n\n  // ===================\n  // MÉTODOS DE CARRITO\n  // ===================\n  \n  async getCarritoItems(sesionId: string): Promise<any[]> {\n    const items = await db\n      .select()\n      .from(schema.carrito)\n      .where(eq(schema.carrito.sesion_id, sesionId))\n      .orderBy(desc(schema.carrito.creado_en));\n\n    const itemsConProducto = await Promise.all(\n      items.map(async (item) => {\n        const producto = await db\n          .select()\n          .from(schema.productos)\n          .where(eq(schema.productos.id, item.producto_id!))\n          .limit(1);\n\n        const imagenes = await db\n          .select()\n          .from(schema.imagenes_productos)\n          .where(eq(schema.imagenes_productos.producto_id, item.producto_id!));\n\n        return {\n          ...item,\n          producto: {\n            ...producto[0],\n            imagenes_productos: imagenes,\n          },\n        };\n      })\n    );\n\n    return itemsConProducto;\n  }\n\n  async addToCarrito(item: InsertCarritoItem): Promise<CarritoItem> {\n    // Verificar si el item ya existe en el carrito\n    const existing = await db\n      .select()\n      .from(schema.carrito)\n      .where(\n        and(\n          eq(schema.carrito.sesion_id, item.sesion_id),\n          eq(schema.carrito.producto_id, item.producto_id!)\n        )\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Actualizar cantidad si ya existe\n      const result = await db\n        .update(schema.carrito)\n        .set({ cantidad: existing[0].cantidad + item.cantidad })\n        .where(eq(schema.carrito.id, existing[0].id))\n        .returning();\n      return result[0];\n    } else {\n      // Crear nuevo item\n      const result = await db.insert(schema.carrito).values(item).returning();\n      return result[0];\n    }\n  }\n\n  async updateCarritoItem(id: string, cantidad: number): Promise<CarritoItem> {\n    const result = await db\n      .update(schema.carrito)\n      .set({ cantidad })\n      .where(eq(schema.carrito.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async removeFromCarrito(id: string): Promise<void> {\n    await db.delete(schema.carrito).where(eq(schema.carrito.id, id));\n  }\n\n  async clearCarrito(sesionId: string): Promise<void> {\n    await db.delete(schema.carrito).where(eq(schema.carrito.sesion_id, sesionId));\n  }\n\n  // ===================\n  // MÉTODOS DE PEDIDOS\n  // ===================\n  \n  async createPedido(pedido: InsertPedido): Promise<Pedido> {\n    // Generar código único de compra\n    const codigoCompra = `KIVO-${crypto.randomBytes(4).toString('hex').toUpperCase()}`;\n    \n    const result = await db\n      .insert(schema.pedidos)\n      .values({\n        ...pedido,\n        codigo_compra: codigoCompra,\n      })\n      .returning();\n    \n    return result[0];\n  }\n\n  async createDetallePedido(detalle: any): Promise<any> {\n    const result = await db.insert(schema.detalles_pedidos).values(detalle).returning();\n    return result[0];\n  }\n\n  async getPedidoByCodigo(codigo: string): Promise<Pedido | undefined> {\n    const result = await db\n      .select()\n      .from(schema.pedidos)\n      .where(eq(schema.pedidos.codigo_compra, codigo))\n      .limit(1);\n    return result[0];\n  }\n\n  // ===================\n  // MÉTODOS DE FICHAS\n  // ===================\n  \n  async getHistorialFichas(filtros?: { estado?: string; fecha?: string; busqueda?: string }): Promise<any[]> {\n    const pedidos = await db\n      .select()\n      .from(schema.pedidos)\n      .orderBy(desc(schema.pedidos.creado_en));\n\n    const pedidosConFichas = await Promise.all(\n      pedidos.map(async (pedido) => {\n        const ficha = await db\n          .select()\n          .from(schema.fichas)\n          .where(eq(schema.fichas.codigo_compra, pedido.codigo_compra))\n          .limit(1);\n\n        return {\n          ...pedido,\n          ficha: ficha[0] || null,\n        };\n      })\n    );\n\n    // Aplicar filtros\n    let resultado = pedidosConFichas;\n\n    if (filtros?.estado) {\n      resultado = resultado.filter(item => \n        item.ficha?.estado === filtros.estado\n      );\n    }\n\n    if (filtros?.busqueda) {\n      resultado = resultado.filter(item =>\n        item.codigo_compra.toLowerCase().includes(filtros.busqueda!.toLowerCase()) ||\n        item.nombre_cliente.toLowerCase().includes(filtros.busqueda!.toLowerCase())\n      );\n    }\n\n    if (filtros?.fecha) {\n      const fechaFiltro = new Date(filtros.fecha);\n      resultado = resultado.filter(item => {\n        const fechaItem = new Date(item.creado_en!);\n        return fechaItem.toDateString() === fechaFiltro.toDateString();\n      });\n    }\n\n    return resultado;\n  }\n\n  async getFichaByCodigo(codigo: string): Promise<Ficha | undefined> {\n    const result = await db\n      .select()\n      .from(schema.fichas)\n      .where(eq(schema.fichas.codigo_compra, codigo))\n      .limit(1);\n    return result[0];\n  }\n\n  async createFicha(ficha: InsertFicha): Promise<Ficha> {\n    const result = await db.insert(schema.fichas).values(ficha).returning();\n    return result[0];\n  }\n\n  async updateFicha(id: string, datos: Partial<InsertFicha>): Promise<Ficha> {\n    const result = await db\n      .update(schema.fichas)\n      .set(datos)\n      .where(eq(schema.fichas.id, id))\n      .returning();\n    return result[0];\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":15355},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Usuarios del sistema\nexport const usuarios = pgTable(\"usuarios\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  nombre: text(\"nombre\").notNull(),\n  es_administrador: boolean(\"es_administrador\").default(false),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Categorías de productos\nexport const categorias = pgTable(\"categorias\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  descripcion: text(\"descripcion\"),\n  activa: boolean(\"activa\").default(true),\n});\n\n// Productos\nexport const productos = pgTable(\"productos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nombre: text(\"nombre\").notNull(),\n  descripcion: text(\"descripcion\"),\n  precio: decimal(\"precio\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").default(0),\n  categoria_id: uuid(\"categoria_id\").references(() => categorias.id),\n  activo: boolean(\"activo\").default(true),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Imágenes de productos\nexport const imagenes_productos = pgTable(\"imagenes_productos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  producto_id: uuid(\"producto_id\").references(() => productos.id),\n  url_imagen: text(\"url_imagen\").notNull(),\n  es_principal: boolean(\"es_principal\").default(false),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Promociones\nexport const promociones = pgTable(\"promociones\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  producto_id: uuid(\"producto_id\").references(() => productos.id),\n  nombre: text(\"nombre\").notNull(),\n  porcentaje_descuento: decimal(\"porcentaje_descuento\", { precision: 5, scale: 2 }).notNull(),\n  fecha_inicio: timestamp(\"fecha_inicio\").notNull(),\n  fecha_fin: timestamp(\"fecha_fin\").notNull(),\n  activa: boolean(\"activa\").default(true),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Pedidos\nexport const pedidos = pgTable(\"pedidos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  codigo_compra: text(\"codigo_compra\").notNull().unique(),\n  usuario_id: uuid(\"usuario_id\").references(() => usuarios.id),\n  nombre_cliente: text(\"nombre_cliente\").notNull(),\n  email_cliente: text(\"email_cliente\"),\n  telefono_cliente: text(\"telefono_cliente\"),\n  direccion_cliente: text(\"direccion_cliente\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  estado: text(\"estado\").default(\"pendiente\"), // pendiente, procesando, enviado, entregado, cancelado\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Detalles de pedidos\nexport const detalles_pedidos = pgTable(\"detalles_pedidos\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pedido_id: uuid(\"pedido_id\").references(() => pedidos.id),\n  producto_id: uuid(\"producto_id\").references(() => productos.id),\n  cantidad: integer(\"cantidad\").notNull(),\n  precio_unitario: decimal(\"precio_unitario\", { precision: 10, scale: 2 }).notNull(),\n  descuento_aplicado: decimal(\"descuento_aplicado\", { precision: 5, scale: 2 }).default(\"0\"),\n});\n\n// Fichas de fidelidad\nexport const fichas = pgTable(\"fichas\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  codigo_compra: text(\"codigo_compra\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  token_encriptado: text(\"token_encriptado\").notNull(),\n  estado: text(\"estado\").default(\"activo\"), // activo, canjeado, expirado\n  fecha_expiracion: timestamp(\"fecha_expiracion\").notNull(),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n  canjeado_en: timestamp(\"canjeado_en\"),\n});\n\n// Configuración del sistema\nexport const configuracion = pgTable(\"configuracion\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clave: text(\"clave\").notNull().unique(),\n  valor: text(\"valor\").notNull(),\n  descripcion: text(\"descripcion\"),\n  actualizado_en: timestamp(\"actualizado_en\").defaultNow(),\n});\n\n// Carrito de compras (temporal)\nexport const carrito = pgTable(\"carrito\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sesion_id: text(\"sesion_id\").notNull(),\n  producto_id: uuid(\"producto_id\").references(() => productos.id),\n  cantidad: integer(\"cantidad\").notNull(),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Auditoría\nexport const auditoria = pgTable(\"auditoria\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accion: text(\"accion\").notNull(),\n  tabla_afectada: text(\"tabla_afectada\"),\n  registro_id: text(\"registro_id\"),\n  usuario_id: uuid(\"usuario_id\").references(() => usuarios.id),\n  detalles: text(\"detalles\"),\n  creado_en: timestamp(\"creado_en\").defaultNow(),\n});\n\n// Schemas para validación\nexport const insertUsuarioSchema = createInsertSchema(usuarios).omit({\n  id: true,\n  creado_en: true,\n});\n\nexport const insertProductoSchema = createInsertSchema(productos).omit({\n  id: true,\n  creado_en: true,\n});\n\nexport const insertPromocionSchema = createInsertSchema(promociones).omit({\n  id: true,\n  creado_en: true,\n});\n\nexport const insertPedidoSchema = createInsertSchema(pedidos).omit({\n  id: true,\n  codigo_compra: true,\n  creado_en: true,\n});\n\nexport const insertFichaSchema = createInsertSchema(fichas).omit({\n  id: true,\n  creado_en: true,\n  canjeado_en: true,\n});\n\nexport const insertCarritoSchema = createInsertSchema(carrito).omit({\n  id: true,\n  creado_en: true,\n});\n\n// Tipos\nexport type Usuario = typeof usuarios.$inferSelect;\nexport type InsertUsuario = z.infer<typeof insertUsuarioSchema>;\n\nexport type Producto = typeof productos.$inferSelect;\nexport type InsertProducto = z.infer<typeof insertProductoSchema>;\n\nexport type Promocion = typeof promociones.$inferSelect;\nexport type InsertPromocion = z.infer<typeof insertPromocionSchema>;\n\nexport type Pedido = typeof pedidos.$inferSelect;\nexport type InsertPedido = z.infer<typeof insertPedidoSchema>;\n\nexport type Ficha = typeof fichas.$inferSelect;\nexport type InsertFicha = z.infer<typeof insertFichaSchema>;\n\nexport type CarritoItem = typeof carrito.$inferSelect;\nexport type InsertCarritoItem = z.infer<typeof insertCarritoSchema>;\n\nexport type ImagenProducto = typeof imagenes_productos.$inferSelect;\nexport type DetallesPedido = typeof detalles_pedidos.$inferSelect;\nexport type Configuracion = typeof configuracion.$inferSelect;\nexport type Auditoria = typeof auditoria.$inferSelect;\n","size_bytes":6640},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/navigation\";\nimport Inicio from \"@/pages/inicio\";\nimport Productos from \"@/pages/productos\";\nimport Carrito from \"@/pages/carrito\";\nimport CanjearFichas from \"@/pages/canjear-fichas\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Inicio} />\n      <Route path=\"/productos\" component={Productos} />\n      <Route path=\"/carrito\" component={Carrito} />\n      <Route path=\"/canjear\" component={CanjearFichas} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <Navigation />\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1233},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(249 82% 69%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(249 82% 69%);\n  --radius: 0.5rem;\n  \n  /* KIVO Custom Colors */\n  --kivo-violet: hsl(249 82% 69%);\n  --kivo-white: hsl(0 0% 100%);\n  \n  --font-sans: Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(249 82% 69%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(249 82% 69%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .kivo-violet {\n    color: #6C63FF;\n  }\n  \n  .bg-kivo-violet {\n    background-color: #6C63FF;\n  }\n  \n  .border-kivo-violet {\n    border-color: #6C63FF;\n  }\n  \n  .timer-badge {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .slide-in {\n    animation: slideIn 0.3s ease-out;\n  }\n}\n\n@layer utilities {\n  @keyframes slideIn {\n    from { \n      transform: translateX(100%); \n    }\n    to { \n      transform: translateX(0); \n    }\n  }\n  \n  /* Mobile table responsive */\n  @media (max-width: 768px) {\n    .admin-table-mobile td:not(.mobile-visible) {\n      display: none;\n    }\n  }\n}\n","size_bytes":2433},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/cart-drawer.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Minus, Plus, Trash2 } from 'lucide-react';\nimport { useCart } from '@/hooks/use-cart';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport { Link } from 'wouter';\n\ninterface CartDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CartDrawer({ isOpen, onClose }: CartDrawerProps) {\n  const { items, updateQuantity, removeFromCart, total, isLoading } = useCart();\n\n  const handleUpdateQuantity = (id: string, cantidad: number) => {\n    if (cantidad <= 0) {\n      removeFromCart.mutate(id);\n    } else {\n      updateQuantity.mutate({ id, cantidad });\n    }\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-[400px] sm:w-[540px]\">\n        <SheetHeader>\n          <SheetTitle data-testid=\"cart-title\">Carrito de Compras</SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex flex-col h-full mt-6\">\n          {isLoading ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-kivo-violet\"></div>\n            </div>\n          ) : items.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <p className=\"text-muted-foreground mb-4\">Tu carrito está vacío</p>\n                <Link href=\"/productos\">\n                  <Button \n                    className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                    onClick={onClose}\n                    data-testid=\"ir-productos-button\"\n                  >\n                    Ver Productos\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex-1 overflow-y-auto space-y-4\">\n                {items.map((item) => {\n                  const imagenPrincipal = item.producto.imagenes_productos?.find(img => img.es_principal) ||\n                                         item.producto.imagenes_productos?.[0];\n                  \n                  return (\n                    <div \n                      key={item.id} \n                      className=\"flex items-center space-x-3 p-3 border border-border rounded-lg\"\n                      data-testid={`cart-item-${item.id}`}\n                    >\n                      <img\n                        src={imagenPrincipal?.url_imagen || 'https://via.placeholder.com/80x80?text=Sin+Imagen'}\n                        alt={item.producto.nombre}\n                        className=\"w-16 h-16 object-cover rounded\"\n                        data-testid=\"cart-item-image\"\n                      />\n                      \n                      <div className=\"flex-1\">\n                        <h4 \n                          className=\"font-medium text-foreground\"\n                          data-testid=\"cart-item-name\"\n                        >\n                          {item.producto.nombre}\n                        </h4>\n                        <p \n                          className=\"text-sm text-muted-foreground\"\n                          data-testid=\"cart-item-price\"\n                        >\n                          {formatearMoneda(parseFloat(item.producto.precio))}\n                        </p>\n                        \n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            className=\"h-6 w-6\"\n                            onClick={() => handleUpdateQuantity(item.id, item.cantidad - 1)}\n                            disabled={updateQuantity.isPending}\n                            data-testid=\"decrease-quantity-button\"\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          \n                          <Badge \n                            variant=\"secondary\"\n                            data-testid=\"cart-item-quantity\"\n                          >\n                            {item.cantidad}\n                          </Badge>\n                          \n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            className=\"h-6 w-6\"\n                            onClick={() => handleUpdateQuantity(item.id, item.cantidad + 1)}\n                            disabled={updateQuantity.isPending}\n                            data-testid=\"increase-quantity-button\"\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"text-destructive hover:text-destructive/80\"\n                        onClick={() => removeFromCart.mutate(item.id)}\n                        disabled={removeFromCart.isPending}\n                        data-testid=\"remove-item-button\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <div className=\"border-t border-border pt-4 space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium text-foreground\">Total:</span>\n                  <span \n                    className=\"text-xl font-bold text-kivo-violet\"\n                    data-testid=\"cart-total\"\n                  >\n                    {formatearMoneda(total)}\n                  </span>\n                </div>\n                \n                <Separator />\n                \n                <Link href=\"/carrito\">\n                  <Button \n                    className=\"w-full bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                    onClick={onClose}\n                    data-testid=\"proceed-checkout-button\"\n                  >\n                    Proceder al Pago\n                  </Button>\n                </Link>\n              </div>\n            </>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":6642},"client/src/components/hero-section.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\n\nexport default function HeroSection() {\n  return (\n    <section className=\"bg-gradient-to-r from-primary/10 to-accent/20 py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            Bienvenido a <span className=\"text-kivo-violet\">KIVO Store</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Tu tienda online favorita en Bolivia. Productos de calidad con nuestro sistema de fichas de fidelidad.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/productos\">\n              <Button \n                size=\"lg\" \n                className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90 px-8 py-3 text-lg\"\n                data-testid=\"ver-productos-button\"\n              >\n                Ver Productos\n              </Button>\n            </Link>\n            <Link href=\"/canjear\">\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"border-2 border-kivo-violet text-kivo-violet hover:bg-kivo-violet hover:text-white px-8 py-3 text-lg\"\n                data-testid=\"canjear-fichas-button\"\n              >\n                Canjear Fichas\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1550},"client/src/components/navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { Badge } from '@/components/ui/badge';\nimport { ShoppingCart, Menu, User } from 'lucide-react';\nimport { useCart } from '@/hooks/use-cart';\nimport CartDrawer from '@/components/cart-drawer';\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const { cantidadTotal } = useCart();\n\n  const navItems = [\n    { href: '/', label: 'Inicio' },\n    { href: '/productos', label: 'Productos' },\n    { href: '/canjear', label: 'Canjear Fichas' },\n  ];\n\n  return (\n    <>\n      <nav className=\"bg-white shadow-sm border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center\" data-testid=\"logo-link\">\n              <span className=\"text-2xl font-bold text-kivo-violet\">KIVO</span>\n              <span className=\"text-sm text-muted-foreground ml-2\">Store</span>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className={`px-3 py-2 text-sm font-medium transition-colors ${\n                      location === item.href\n                        ? 'text-kivo-violet'\n                        : 'text-muted-foreground hover:text-kivo-violet'\n                    }`}\n                    data-testid={`nav-link-${item.label.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n              </div>\n            </div>\n\n            {/* Cart and Admin */}\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative\"\n                onClick={() => setIsCartOpen(true)}\n                data-testid=\"cart-button\"\n              >\n                <ShoppingCart className=\"w-6 h-6\" />\n                {cantidadTotal > 0 && (\n                  <Badge\n                    variant=\"destructive\"\n                    className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                    data-testid=\"cart-count\"\n                  >\n                    {cantidadTotal}\n                  </Badge>\n                )}\n              </Button>\n\n              <Link href=\"/admin\">\n                <Button \n                  className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                  data-testid=\"admin-button\"\n                >\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Admin\n                </Button>\n              </Link>\n\n              {/* Mobile Menu */}\n              <div className=\"md:hidden\">\n                <Sheet>\n                  <SheetTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid=\"mobile-menu-button\">\n                      <Menu className=\"w-6 h-6\" />\n                    </Button>\n                  </SheetTrigger>\n                  <SheetContent side=\"right\" className=\"w-[300px]\">\n                    <div className=\"flex flex-col space-y-4 mt-6\">\n                      {navItems.map((item) => (\n                        <Link\n                          key={item.href}\n                          href={item.href}\n                          className={`text-left p-3 rounded-md transition-colors ${\n                            location === item.href\n                              ? 'bg-kivo-violet text-white'\n                              : 'text-foreground hover:bg-accent'\n                          }`}\n                          data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(' ', '-')}`}\n                        >\n                          {item.label}\n                        </Link>\n                      ))}\n                    </div>\n                  </SheetContent>\n                </Sheet>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <CartDrawer isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />\n    </>\n  );\n}\n","size_bytes":4568},"client/src/components/product-card.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { useCart } from '@/hooks/use-cart';\nimport { useTemporizadorPromo } from '@/hooks/use-temporizador-promo';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport type { Producto, ImagenProducto, Promocion } from '@shared/schema';\n\ninterface ProductCardProps {\n  producto: Producto & {\n    imagenes_productos: ImagenProducto[];\n    promociones: Promocion[];\n  };\n}\n\nexport default function ProductCard({ producto }: ProductCardProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const { addToCart } = useCart();\n\n  const promocionActiva = producto.promociones?.find(p => \n    p.activa && new Date(p.fecha_fin) > new Date()\n  );\n\n  const tiempoRestante = promocionActiva ? \n    useTemporizadorPromo(promocionActiva.fecha_fin) : null;\n\n  const imagenPrincipal = producto.imagenes_productos?.find(img => img.es_principal) ||\n                         producto.imagenes_productos?.[0];\n\n  const precioOriginal = parseFloat(producto.precio);\n  const precioConDescuento = promocionActiva ? \n    precioOriginal * (1 - parseFloat(promocionActiva.porcentaje_descuento) / 100) : \n    precioOriginal;\n\n  const handleAddToCart = async () => {\n    setIsLoading(true);\n    try {\n      await addToCart.mutateAsync({\n        productoId: producto.id,\n        cantidad: 1\n      });\n      \n      toast({\n        title: \"Producto agregado\",\n        description: `${producto.nombre} se agregó al carrito`,\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo agregar el producto al carrito\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-md transition-shadow group\">\n      <div className=\"relative\">\n        {/* Timer Badge */}\n        {promocionActiva && tiempoRestante && tiempoRestante !== 'Expirado' && (\n          <div className=\"absolute top-2 right-2 z-10\">\n            <Badge \n              className=\"bg-kivo-violet text-white timer-badge\"\n              data-testid=\"timer-badge\"\n            >\n              {tiempoRestante}\n            </Badge>\n          </div>\n        )}\n\n        {/* Discount Badge */}\n        {promocionActiva && (\n          <div className=\"absolute top-2 left-2 z-10\">\n            <Badge \n              variant=\"destructive\"\n              data-testid=\"discount-badge\"\n            >\n              -{Math.round(parseFloat(promocionActiva.porcentaje_descuento))}%\n            </Badge>\n          </div>\n        )}\n\n        <img\n          src={imagenPrincipal?.url_imagen || 'https://via.placeholder.com/400x300?text=Sin+Imagen'}\n          alt={producto.nombre}\n          className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n          data-testid=\"product-image\"\n        />\n      </div>\n\n      <CardContent className=\"p-4\">\n        <h3 \n          className=\"font-semibold text-foreground mb-2\" \n          data-testid=\"product-name\"\n        >\n          {producto.nombre}\n        </h3>\n        \n        <p \n          className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" \n          data-testid=\"product-description\"\n        >\n          {producto.descripcion}\n        </p>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {promocionActiva && (\n              <span \n                className=\"text-muted-foreground line-through text-sm\"\n                data-testid=\"original-price\"\n              >\n                {formatearMoneda(precioOriginal)}\n              </span>\n            )}\n            <span \n              className={`text-lg font-bold ${promocionActiva ? 'text-kivo-violet' : 'text-foreground'}`}\n              data-testid=\"sale-price\"\n            >\n              {formatearMoneda(precioConDescuento)}\n            </span>\n          </div>\n          \n          <Button\n            size=\"sm\"\n            className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n            onClick={handleAddToCart}\n            disabled={isLoading || addToCart.isPending}\n            data-testid=\"add-to-cart-button\"\n          >\n            {isLoading || addToCart.isPending ? 'Agregando...' : 'Agregar'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4563},"client/src/components/promotional-banner.tsx":{"content":"import { useTemporizadorPromo } from '@/hooks/use-temporizador-promo';\nimport { Flame } from 'lucide-react';\n\nexport default function PromotionalBanner() {\n  // Fecha de ejemplo - en producción vendría de la API\n  const fechaFinPromo = new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 14 * 60 * 60 * 1000); // 2 días 14 horas\n  const tiempoRestante = useTemporizadorPromo(fechaFinPromo);\n\n  return (\n    <section className=\"bg-kivo-violet text-white py-4\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <Flame className=\"w-5 h-5\" />\n          <span className=\"font-medium\">¡Ofertas especiales por tiempo limitado! Hasta 50% de descuento</span>\n          <div \n            className=\"font-bold animate-pulse\" \n            data-testid=\"promocion-timer\"\n          >\n            {tiempoRestante}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":958},"client/src/components/qr-scanner.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Camera, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QRScannerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onScan: (data: string) => void;\n}\n\nexport default function QRScanner({ isOpen, onClose, onScan }: QRScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const { toast } = useToast();\n\n  const startCamera = async () => {\n    try {\n      setError(null);\n      setIsScanning(true);\n      \n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { \n          facingMode: 'environment', // Usar cámara trasera en móviles\n          width: { ideal: 640 },\n          height: { ideal: 480 }\n        }\n      });\n      \n      streamRef.current = stream;\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        await videoRef.current.play();\n      }\n    } catch (err) {\n      console.error('Error accessing camera:', err);\n      setError('No se pudo acceder a la cámara. Verifica los permisos.');\n      setIsScanning(false);\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n  };\n\n  const handleClose = () => {\n    stopCamera();\n    onClose();\n  };\n\n  const simulateQRScan = () => {\n    // Simular un QR escaneado para propósitos de demo\n    const mockQR = JSON.stringify({\n      cod_ficha: \"ABC123DEF456\",\n      cod_compra: \"KIVO-001\"\n    });\n    \n    onScan(mockQR);\n    toast({\n      title: \"QR Escaneado\",\n      description: \"Código QR detectado correctamente\",\n    });\n    handleClose();\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      startCamera();\n    } else {\n      stopCamera();\n    }\n\n    return () => stopCamera();\n  }, [isOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Escanear Código QR\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              data-testid=\"close-scanner-button\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"relative bg-gray-900 rounded-lg h-64 flex items-center justify-center overflow-hidden\">\n            {error ? (\n              <div className=\"text-center text-white p-4\">\n                <Camera className=\"w-16 h-16 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">{error}</p>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"mt-2\"\n                  onClick={startCamera}\n                  data-testid=\"retry-camera-button\"\n                >\n                  Reintentar\n                </Button>\n              </div>\n            ) : isScanning ? (\n              <>\n                <video\n                  ref={videoRef}\n                  className=\"w-full h-full object-cover\"\n                  playsInline\n                  muted\n                  data-testid=\"camera-video\"\n                />\n                \n                {/* QR Scanner overlay */}\n                <div \n                  className=\"absolute border-2 border-kivo-violet w-48 h-48 rounded-lg\"\n                  style={{ \n                    boxShadow: '0 0 0 9999px rgba(0,0,0,0.5)' \n                  }}\n                  data-testid=\"scan-overlay\"\n                />\n              </>\n            ) : (\n              <div className=\"text-white text-center\">\n                <Camera className=\"w-16 h-16 mx-auto mb-2\" />\n                <p className=\"text-sm\">Iniciando cámara...</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"text-center space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Coloca el código QR dentro del marco para escanearlo\n            </p>\n            \n            {/* Botón temporal para demo */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={simulateQRScan}\n              data-testid=\"simulate-scan-button\"\n            >\n              Simular Escaneo (Demo)\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={handleClose}\n              data-testid=\"cancel-scan-button\"\n            >\n              Cancelar\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5147},"client/src/hooks/use-cart.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { CarritoItem, Producto, ImagenProducto } from '@shared/schema';\n\ninterface CarritoItemConProducto extends CarritoItem {\n  producto: Producto & {\n    imagenes_productos: ImagenProducto[];\n  };\n}\n\nexport const useCart = () => {\n  const [sesionId, setSesionId] = useState<string>('');\n  const queryClient = useQueryClient();\n\n  // Generar sesion ID única si no existe\n  useEffect(() => {\n    let id = localStorage.getItem('sesion_id');\n    if (!id) {\n      id = crypto.randomUUID();\n      localStorage.setItem('sesion_id', id);\n    }\n    setSesionId(id);\n  }, []);\n\n  const { data: items = [], isLoading } = useQuery<CarritoItemConProducto[]>({\n    queryKey: ['/api/carrito', sesionId],\n    enabled: !!sesionId,\n  });\n\n  const addToCart = useMutation({\n    mutationFn: async ({ productoId, cantidad }: { productoId: string; cantidad: number }) => {\n      const response = await apiRequest('POST', '/api/carrito', {\n        sesion_id: sesionId,\n        producto_id: productoId,\n        cantidad,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/carrito', sesionId] });\n    },\n  });\n\n  const updateQuantity = useMutation({\n    mutationFn: async ({ id, cantidad }: { id: string; cantidad: number }) => {\n      const response = await apiRequest('PATCH', `/api/carrito/${id}`, { cantidad });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/carrito', sesionId] });\n    },\n  });\n\n  const removeFromCart = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/carrito/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/carrito', sesionId] });\n    },\n  });\n\n  const clearCart = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', `/api/carrito/sesion/${sesionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/carrito', sesionId] });\n    },\n  });\n\n  const total = items.reduce((sum, item) => \n    sum + (parseFloat(item.producto.precio) * item.cantidad), 0\n  );\n\n  const cantidadTotal = items.reduce((sum, item) => sum + item.cantidad, 0);\n\n  return {\n    items,\n    isLoading,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    total,\n    cantidadTotal,\n    sesionId,\n  };\n};\n","size_bytes":2659},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-temporizador-promo.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport const useTemporizadorPromo = (fechaFin: Date | string) => {\n  const [tiempoRestante, setTiempoRestante] = useState('');\n\n  useEffect(() => {\n    const calcularTiempo = () => {\n      const ahora = new Date();\n      const fin = new Date(fechaFin);\n      const diferencia = fin.getTime() - ahora.getTime();\n\n      if (diferencia > 0) {\n        const dias = Math.floor(diferencia / (1000 * 60 * 60 * 24));\n        const horas = Math.floor((diferencia / (1000 * 60 * 60)) % 24);\n        \n        if (dias > 0) {\n          setTiempoRestante(`${dias}d ${horas}h`);\n        } else if (horas > 0) {\n          setTiempoRestante(`${horas}h`);\n        } else {\n          const minutos = Math.floor((diferencia / (1000 * 60)) % 60);\n          setTiempoRestante(`${minutos}m`);\n        }\n      } else {\n        setTiempoRestante('Expirado');\n      }\n    };\n\n    calcularTiempo();\n    \n    // Actualizar cada hora según los requerimientos\n    const intervalo = setInterval(calcularTiempo, 3600000);\n\n    return () => clearInterval(intervalo);\n  }, [fechaFin]);\n\n  return tiempoRestante;\n};\n","size_bytes":1129},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/formatear-moneda.ts":{"content":"export const formatearMoneda = (monto: number): string => {\n  return new Intl.NumberFormat('es-BO', { \n    style: 'currency', \n    currency: 'BOB',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(monto);\n};\n\nexport const formatearNumero = (numero: number): string => {\n  return new Intl.NumberFormat('es-BO').format(numero);\n};\n","size_bytes":352},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"@shared/schema\";\n\nconst connectionString = import.meta.env.VITE_DATABASE_URL;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL no está configurada\");\n}\n\nconst client = postgres(connectionString);\nexport const db = drizzle(client, { schema });\n","size_bytes":362},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport AdminFichas from '@/components/admin/admin-fichas';\nimport AdminProductos from '@/components/admin/admin-productos';\nimport AdminPromociones from '@/components/admin/admin-promociones';\nimport { Shield, Lock } from 'lucide-react';\n\nexport default function Admin() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loginData, setLoginData] = useState({\n    email: '',\n    password: '',\n  });\n  const { toast } = useToast();\n\n  const login = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('admin_token', data.token);\n      setIsAuthenticated(true);\n      toast({\n        title: \"Acceso autorizado\",\n        description: \"Bienvenido al panel de administración\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error de autenticación\",\n        description: \"Email o contraseña incorrectos\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem('admin_token');\n    if (token) {\n      // Verificar si el token es válido\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    login.mutate(loginData);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('admin_token');\n    setIsAuthenticated(false);\n    toast({\n      title: \"Sesión cerrada\",\n      description: \"Has salido del panel de administración\",\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardHeader className=\"text-center\">\n            <Shield className=\"w-12 h-12 text-kivo-violet mx-auto mb-4\" />\n            <CardTitle className=\"text-2xl\">Panel de Administración</CardTitle>\n            <p className=\"text-muted-foreground\">\n              Ingresa tus credenciales para acceder\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={loginData.email}\n                  onChange={(e) => setLoginData(prev => ({ ...prev, email: e.target.value }))}\n                  placeholder=\"admin@kivo.com\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Contraseña</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={loginData.password}\n                  onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"••••••••\"\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                disabled={login.isPending}\n                data-testid=\"button-login\"\n              >\n                {login.isPending ? 'Iniciando sesión...' : 'Iniciar Sesión'}\n              </Button>\n            </form>\n\n            <div className=\"mt-4 p-3 bg-secondary rounded-lg text-sm text-muted-foreground\">\n              <p className=\"font-medium mb-1\">Credenciales de demo:</p>\n              <p>Email: admin@kivo.com</p>\n              <p>Contraseña: password</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Panel de Administración</h1>\n            <p className=\"text-muted-foreground\">Gestiona tu tienda KIVO</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n              <Lock className=\"w-4 h-4\" />\n              <span>admin@kivo.com</span>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              Cerrar Sesión\n            </Button>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"fichas\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"fichas\" data-testid=\"tab-fichas\">\n              Fichas\n            </TabsTrigger>\n            <TabsTrigger value=\"productos\" data-testid=\"tab-productos\">\n              Productos\n            </TabsTrigger>\n            <TabsTrigger value=\"promociones\" data-testid=\"tab-promociones\">\n              Promociones\n            </TabsTrigger>\n            <TabsTrigger value=\"pedidos\" data-testid=\"tab-pedidos\">\n              Pedidos\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"fichas\">\n            <AdminFichas />\n          </TabsContent>\n\n          <TabsContent value=\"productos\">\n            <AdminProductos />\n          </TabsContent>\n\n          <TabsContent value=\"promociones\">\n            <AdminPromociones />\n          </TabsContent>\n\n          <TabsContent value=\"pedidos\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Gestión de Pedidos</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  La gestión de pedidos estará disponible próximamente.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6702},"client/src/pages/canjear-fichas.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, QrCode, AlertCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport QRScanner from '@/components/qr-scanner';\n\nexport default function CanjearFichas() {\n  const [codigoCompra, setCodigoCompra] = useState('');\n  const [isQRScannerOpen, setIsQRScannerOpen] = useState(false);\n  const [fichaValidada, setFichaValidada] = useState<any>(null);\n  const { toast } = useToast();\n\n  const validarFicha = useMutation({\n    mutationFn: async (codigo: string) => {\n      const response = await apiRequest('POST', '/api/fichas/validar', { codigo_compra: codigo });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setFichaValidada(data);\n      toast({\n        title: \"Ficha encontrada\",\n        description: \"La ficha es válida y puede ser canjeada\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Ficha no válida\",\n        description: error.message || \"No se encontró una ficha válida para este código\",\n      });\n      setFichaValidada(null);\n    },\n  });\n\n  const canjearFicha = useMutation({\n    mutationFn: async (codigo: string) => {\n      const response = await apiRequest('POST', '/api/fichas/canjear', { codigo_compra: codigo });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Ficha canjeada\",\n        description: `Descuento aplicado: ${data.descuento_aplicado}%`,\n      });\n      setFichaValidada(null);\n      setCodigoCompra('');\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error al canjear\",\n        description: error.message || \"No se pudo canjear la ficha\",\n      });\n    },\n  });\n\n  const handleValidar = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (codigoCompra.trim()) {\n      validarFicha.mutate(codigoCompra.trim());\n    }\n  };\n\n  const handleCanjear = () => {\n    if (fichaValidada?.codigo_compra) {\n      canjearFicha.mutate(fichaValidada.codigo_compra);\n    }\n  };\n\n  const handleQRScan = (data: string) => {\n    try {\n      const qrData = JSON.parse(data);\n      if (qrData.cod_compra) {\n        setCodigoCompra(qrData.cod_compra);\n        validarFicha.mutate(qrData.cod_compra);\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"QR inválido\",\n        description: \"El código QR no tiene el formato correcto\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Canjear Fichas <span className=\"text-kivo-violet\">KIVO</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Usa tus fichas de fidelidad para obtener descuentos exclusivos\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Formulario de canje */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-kivo-violet\" />\n                <span>Validar Ficha</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <form onSubmit={handleValidar} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"codigo-compra\">Código de Compra</Label>\n                  <Input\n                    id=\"codigo-compra\"\n                    type=\"text\"\n                    placeholder=\"KIVO-ABC123\"\n                    value={codigoCompra}\n                    onChange={(e) => setCodigoCompra(e.target.value)}\n                    className=\"mt-1\"\n                    data-testid=\"input-codigo-compra\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\"\n                  className=\"w-full bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                  disabled={validarFicha.isPending}\n                  data-testid=\"button-validar\"\n                >\n                  {validarFicha.isPending ? 'Validando...' : 'Validar Ficha'}\n                </Button>\n              </form>\n\n              <div className=\"text-center\">\n                <span className=\"text-muted-foreground text-sm\">o</span>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                className=\"w-full border-2 border-kivo-violet text-kivo-violet hover:bg-kivo-violet hover:text-white\"\n                onClick={() => setIsQRScannerOpen(true)}\n                data-testid=\"button-escanear-qr\"\n              >\n                <QrCode className=\"w-4 h-4 mr-2\" />\n                Escanear Código QR\n              </Button>\n\n              {/* Resultado de validación */}\n              {fichaValidada && (\n                <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span className=\"font-medium text-green-800\">Ficha Válida</span>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Código:</span>\n                      <Badge variant=\"secondary\">{fichaValidada.codigo_compra}</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Estado:</span>\n                      <Badge className=\"bg-green-100 text-green-800\">{fichaValidada.estado}</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Descuento disponible:</span>\n                      <span className=\"font-bold text-kivo-violet\">10%</span>\n                    </div>\n                  </div>\n\n                  <Button\n                    className=\"w-full mt-4 bg-green-600 text-white hover:bg-green-700\"\n                    onClick={handleCanjear}\n                    disabled={canjearFicha.isPending}\n                    data-testid=\"button-canjear\"\n                  >\n                    {canjearFicha.isPending ? 'Canjeando...' : 'Canjear Ficha'}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Información del sistema */}\n          <Card>\n            <CardHeader>\n              <CardTitle>¿Cómo funciona?</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                    1\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Realiza una compra</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Por cada compra que hagas, recibirás una ficha de fidelidad\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                    2\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Recibe tu código QR</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Te enviaremos un código QR único por email o WhatsApp\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                    3\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Canjea tu descuento</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Usa el código o escanea el QR para obtener tu descuento\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-kivo-violet/10 border border-kivo-violet/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <AlertCircle className=\"w-5 h-5 text-kivo-violet\" />\n                  <span className=\"font-medium text-kivo-violet\">Importante</span>\n                </div>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• Las fichas expiran después de 30 días</li>\n                  <li>• Cada ficha puede usarse solo una vez</li>\n                  <li>• 5 fichas = 10% de descuento</li>\n                  <li>• El descuento se aplica en tu próxima compra</li>\n                </ul>\n              </div>\n\n              {/* QR Code Example */}\n              <div className=\"text-center p-4 bg-secondary rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Ejemplo de código QR:\n                </p>\n                <div className=\"w-24 h-24 bg-white border-2 border-kivo-violet rounded mx-auto flex items-center justify-center\">\n                  <div \n                    className=\"w-20 h-20 bg-gray-800\"\n                    style={{\n                      backgroundImage: `\n                        linear-gradient(90deg, black 50%, transparent 50%),\n                        linear-gradient(black 50%, transparent 50%)\n                      `,\n                      backgroundSize: '4px 4px'\n                    }}\n                  />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">KIVO-XYZ789</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <QRScanner\n        isOpen={isQRScannerOpen}\n        onClose={() => setIsQRScannerOpen(false)}\n        onScan={handleQRScan}\n      />\n    </div>\n  );\n}\n","size_bytes":10816},"client/src/pages/carrito.tsx":{"content":"import { useState } from 'react';\nimport { useCart } from '@/hooks/use-cart';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Minus, Plus, Trash2, ShoppingBag } from 'lucide-react';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport { Link } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function Carrito() {\n  const { items, updateQuantity, removeFromCart, total, clearCart, sesionId } = useCart();\n  const [formData, setFormData] = useState({\n    nombre_cliente: '',\n    email_cliente: '',\n    telefono_cliente: '',\n    direccion_cliente: '',\n  });\n  const { toast } = useToast();\n\n  const crearPedido = useMutation({\n    mutationFn: async (pedidoData: any) => {\n      const response = await apiRequest('POST', '/api/pedidos', pedidoData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Pedido creado\",\n        description: `Tu pedido ${data.codigo_compra} ha sido creado exitosamente`,\n      });\n      clearCart.mutate();\n      // Redirect to success page or show confirmation\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo procesar el pedido\",\n      });\n    },\n  });\n\n  const handleUpdateQuantity = (id: string, cantidad: number) => {\n    if (cantidad <= 0) {\n      removeFromCart.mutate(id);\n    } else {\n      updateQuantity.mutate({ id, cantidad });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (items.length === 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"Carrito vacío\",\n        description: \"Agrega productos al carrito antes de proceder\",\n      });\n      return;\n    }\n\n    const pedidoData = {\n      ...formData,\n      total: total,\n      sesion_id: sesionId,\n    };\n\n    crearPedido.mutate(pedidoData);\n  };\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"w-24 h-24 text-muted-foreground mx-auto mb-6\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n              Tu carrito está vacío\n            </h1>\n            <p className=\"text-muted-foreground mb-8\">\n              Explora nuestros productos y agrega algunos a tu carrito\n            </p>\n            <Link href=\"/productos\">\n              <Button \n                className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                data-testid=\"ir-productos-button\"\n              >\n                Ver Productos\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-8\">Carrito de Compras</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Items del carrito */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {items.map((item) => {\n              const imagenPrincipal = item.producto.imagenes_productos?.find(img => img.es_principal) ||\n                                     item.producto.imagenes_productos?.[0];\n              \n              return (\n                <Card key={item.id} data-testid={`cart-item-${item.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <img\n                        src={imagenPrincipal?.url_imagen || 'https://via.placeholder.com/120x120?text=Sin+Imagen'}\n                        alt={item.producto.nombre}\n                        className=\"w-20 h-20 object-cover rounded\"\n                        data-testid=\"cart-item-image\"\n                      />\n                      \n                      <div className=\"flex-1\">\n                        <h3 \n                          className=\"font-semibold text-foreground\"\n                          data-testid=\"cart-item-name\"\n                        >\n                          {item.producto.nombre}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {item.producto.descripcion}\n                        </p>\n                        <p \n                          className=\"text-lg font-bold text-kivo-violet mt-2\"\n                          data-testid=\"cart-item-price\"\n                        >\n                          {formatearMoneda(parseFloat(item.producto.precio))}\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8\"\n                          onClick={() => handleUpdateQuantity(item.id, item.cantidad - 1)}\n                          disabled={updateQuantity.isPending}\n                          data-testid=\"decrease-quantity-button\"\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                        \n                        <Badge \n                          variant=\"secondary\"\n                          className=\"min-w-[40px] justify-center\"\n                          data-testid=\"cart-item-quantity\"\n                        >\n                          {item.cantidad}\n                        </Badge>\n                        \n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8\"\n                          onClick={() => handleUpdateQuantity(item.id, item.cantidad + 1)}\n                          disabled={updateQuantity.isPending}\n                          data-testid=\"increase-quantity-button\"\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"text-destructive hover:text-destructive/80\"\n                        onClick={() => removeFromCart.mutate(item.id)}\n                        disabled={removeFromCart.isPending}\n                        data-testid=\"remove-item-button\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Resumen y checkout */}\n          <div className=\"space-y-6\">\n            {/* Resumen del pedido */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Resumen del Pedido</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span data-testid=\"subtotal\">{formatearMoneda(total)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Envío:</span>\n                  <span>Gratis</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between text-lg font-bold\">\n                  <span>Total:</span>\n                  <span \n                    className=\"text-kivo-violet\"\n                    data-testid=\"total-precio\"\n                  >\n                    {formatearMoneda(total)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Formulario de checkout */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Información de Entrega</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"nombre\">Nombre Completo</Label>\n                    <Input\n                      id=\"nombre\"\n                      type=\"text\"\n                      required\n                      value={formData.nombre_cliente}\n                      onChange={(e) => setFormData(prev => ({ ...prev, nombre_cliente: e.target.value }))}\n                      data-testid=\"input-nombre\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      required\n                      value={formData.email_cliente}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email_cliente: e.target.value }))}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"telefono\">Teléfono</Label>\n                    <Input\n                      id=\"telefono\"\n                      type=\"tel\"\n                      required\n                      value={formData.telefono_cliente}\n                      onChange={(e) => setFormData(prev => ({ ...prev, telefono_cliente: e.target.value }))}\n                      data-testid=\"input-telefono\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"direccion\">Dirección de Entrega</Label>\n                    <Input\n                      id=\"direccion\"\n                      type=\"text\"\n                      required\n                      value={formData.direccion_cliente}\n                      onChange={(e) => setFormData(prev => ({ ...prev, direccion_cliente: e.target.value }))}\n                      data-testid=\"input-direccion\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                    disabled={crearPedido.isPending}\n                    data-testid=\"finalizar-pedido-button\"\n                  >\n                    {crearPedido.isPending ? 'Procesando...' : 'Finalizar Pedido'}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10968},"client/src/pages/inicio.tsx":{"content":"import HeroSection from '@/components/hero-section';\nimport PromotionalBanner from '@/components/promotional-banner';\nimport ProductCard from '@/components/product-card';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Producto, ImagenProducto, Promocion } from '@shared/schema';\nimport { CheckCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useState } from 'react';\nimport { Link } from 'wouter';\n\ntype ProductoConImagenesYPromociones = Producto & {\n  imagenes_productos: ImagenProducto[];\n  promociones: Promocion[];\n};\n\nexport default function Inicio() {\n  const [codigoCompra, setCodigoCompra] = useState('');\n\n  const { data: productosEnOferta = [], isLoading } = useQuery<ProductoConImagenesYPromociones[]>({\n    queryKey: ['/api/productos/ofertas'],\n  });\n\n  const handleCanjearFicha = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (codigoCompra.trim()) {\n      // Redirect to canje page with code\n      window.location.href = `/canjear?codigo=${codigoCompra}`;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <HeroSection />\n      <PromotionalBanner />\n\n      {/* Featured Products with Timers */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Ofertas del Día</h2>\n            <p className=\"text-muted-foreground\">Aprovecha estos descuentos antes de que terminen</p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-gray-200 rounded-lg h-48 mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              ))}\n            </div>\n          ) : productosEnOferta.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {productosEnOferta.map((producto) => (\n                <ProductCard key={producto.id} producto={producto} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground mb-4\">No hay ofertas activas en este momento</p>\n              <Link href=\"/productos\">\n                <Button className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\">\n                  Ver Todos los Productos\n                </Button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Loyalty System Section */}\n      <section className=\"py-16 bg-secondary/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-6\">\n                Sistema de Fichas KIVO\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Gana fichas con cada compra y obtén descuentos exclusivos. Nuestro sistema de fidelidad \n                tipo \"Bitcoin\" te permite acumular puntos y canjearlos fácilmente.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-foreground\">1 ficha por cada compra realizada</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-foreground\">5 fichas = 10% de descuento</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-kivo-violet rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-foreground\">Códigos QR únicos para cada compra</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Canjear Fichas Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Canjear Fichas</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <form onSubmit={handleCanjearFicha} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"codigo-compra\">Código de Compra</Label>\n                    <Input\n                      id=\"codigo-compra\"\n                      type=\"text\"\n                      placeholder=\"KIVO-ABC123\"\n                      value={codigoCompra}\n                      onChange={(e) => setCodigoCompra(e.target.value)}\n                      data-testid=\"input-codigo-compra\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\"\n                    className=\"w-full bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                    data-testid=\"button-validar-canjear\"\n                  >\n                    Validar y Canjear\n                  </Button>\n                </form>\n\n                <div className=\"text-center\">\n                  <span className=\"text-muted-foreground text-sm\">o</span>\n                </div>\n\n                <Link href=\"/canjear\">\n                  <Button \n                    variant=\"outline\"\n                    className=\"w-full border-2 border-kivo-violet text-kivo-violet hover:bg-kivo-violet hover:text-white\"\n                    data-testid=\"button-escanear-qr\"\n                  >\n                    Escanear Código QR\n                  </Button>\n                </Link>\n\n                {/* QR Code Example */}\n                <div className=\"mt-6 p-4 bg-secondary rounded-lg text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Ejemplo de código QR de ficha:\n                  </p>\n                  <div className=\"w-24 h-24 bg-white border-2 border-kivo-violet rounded mx-auto flex items-center justify-center\">\n                    <div \n                      className=\"w-20 h-20 bg-gray-800\"\n                      style={{\n                        backgroundImage: `\n                          linear-gradient(90deg, black 50%, transparent 50%),\n                          linear-gradient(black 50%, transparent 50%)\n                        `,\n                        backgroundSize: '4px 4px'\n                      }}\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">KIVO-XYZ789</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-secondary py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"text-lg font-bold text-foreground mb-4\">KIVO Store</h3>\n              <p className=\"text-muted-foreground\">\n                Tu tienda online favorita en Bolivia con el mejor sistema de fidelidad.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground mb-4\">Navegación</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><Link href=\"/\" className=\"hover:text-kivo-violet\">Inicio</Link></li>\n                <li><Link href=\"/productos\" className=\"hover:text-kivo-violet\">Productos</Link></li>\n                <li><Link href=\"/canjear\" className=\"hover:text-kivo-violet\">Canjear Fichas</Link></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground mb-4\">Soporte</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-kivo-violet\">Ayuda</a></li>\n                <li><a href=\"#\" className=\"hover:text-kivo-violet\">Términos</a></li>\n                <li><a href=\"#\" className=\"hover:text-kivo-violet\">Privacidad</a></li>\n                <li><a href=\"#\" className=\"hover:text-kivo-violet\">Contacto</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground mb-4\">Síguenos</h4>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-kivo-violet\">\n                  Twitter\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-kivo-violet\">\n                  Facebook\n                </a>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-8 pt-8 border-t border-border text-center text-muted-foreground\">\n            <p>&copy; 2024 KIVO Store. Todos los derechos reservados.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9753},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/productos.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport ProductCard from '@/components/product-card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Search, Filter } from 'lucide-react';\nimport type { Producto, ImagenProducto, Promocion } from '@shared/schema';\n\ntype ProductoConImagenesYPromociones = Producto & {\n  imagenes_productos: ImagenProducto[];\n  promociones: Promocion[];\n};\n\nexport default function Productos() {\n  const [busqueda, setBusqueda] = useState('');\n  const [categoria, setCategoria] = useState('');\n  const [ordenar, setOrdenar] = useState('');\n\n  const { data: productos = [], isLoading } = useQuery<ProductoConImagenesYPromociones[]>({\n    queryKey: ['/api/productos', { busqueda, categoria, ordenar }],\n  });\n\n  const { data: categorias = [] } = useQuery({\n    queryKey: ['/api/categorias'],\n  });\n\n  const handleBuscar = (e: React.FormEvent) => {\n    e.preventDefault();\n    // La búsqueda se actualiza automáticamente por el estado\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">Productos</h1>\n          <p className=\"text-muted-foreground\">\n            Explora nuestro catálogo completo de productos\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-card p-6 rounded-lg border border-border mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"md:col-span-2\">\n              <form onSubmit={handleBuscar} className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Buscar productos...\"\n                  value={busqueda}\n                  onChange={(e) => setBusqueda(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-busqueda\"\n                />\n              </form>\n            </div>\n            \n            <Select value={categoria} onValueChange={setCategoria}>\n              <SelectTrigger data-testid=\"select-categoria\">\n                <SelectValue placeholder=\"Categoría\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Todas las categorías</SelectItem>\n                {categorias.map((cat: any) => (\n                  <SelectItem key={cat.id} value={cat.id}>\n                    {cat.nombre}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={ordenar} onValueChange={setOrdenar}>\n              <SelectTrigger data-testid=\"select-ordenar\">\n                <SelectValue placeholder=\"Ordenar por\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Por defecto</SelectItem>\n                <SelectItem value=\"precio_asc\">Precio: Menor a Mayor</SelectItem>\n                <SelectItem value=\"precio_desc\">Precio: Mayor a Menor</SelectItem>\n                <SelectItem value=\"nombre_asc\">Nombre: A-Z</SelectItem>\n                <SelectItem value=\"nombre_desc\">Nombre: Z-A</SelectItem>\n                <SelectItem value=\"mas_recientes\">Más Recientes</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(12)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-200 rounded-lg h-48 mb-4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        ) : productos.length > 0 ? (\n          <>\n            <div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n              data-testid=\"productos-grid\"\n            >\n              {productos.map((producto) => (\n                <ProductCard key={producto.id} producto={producto} />\n              ))}\n            </div>\n\n            {/* Pagination placeholder */}\n            <div className=\"flex justify-center mt-12\">\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" disabled>\n                  Anterior\n                </Button>\n                <Button className=\"bg-kivo-violet text-white\">\n                  1\n                </Button>\n                <Button variant=\"outline\">\n                  2\n                </Button>\n                <Button variant=\"outline\">\n                  3\n                </Button>\n                <Button variant=\"outline\">\n                  Siguiente\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Filter className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">\n              No se encontraron productos\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Intenta ajustar los filtros de búsqueda\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setBusqueda('');\n                setCategoria('');\n                setOrdenar('');\n              }}\n              data-testid=\"limpiar-filtros-button\"\n            >\n              Limpiar Filtros\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6100},"client/src/components/admin/admin-fichas.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { QrCode, Search, Filter, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport QRScanner from '@/components/qr-scanner';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\nexport default function AdminFichas() {\n  const [filtros, setFiltros] = useState({\n    estado: '',\n    fecha: '',\n    busqueda: '',\n  });\n  const [isQRScannerOpen, setIsQRScannerOpen] = useState(false);\n  const [selectedPedido, setSelectedPedido] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: historial = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/fichas', filtros],\n  });\n\n  const generarFicha = useMutation({\n    mutationFn: async (codigoCompra: string) => {\n      const response = await apiRequest('POST', '/api/admin/fichas/generar', { codigo_compra: codigoCompra });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ficha generada\",\n        description: \"La ficha se ha generado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/fichas'] });\n      setSelectedPedido(null);\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo generar la ficha\",\n      });\n    },\n  });\n\n  const canjearFichaManual = useMutation({\n    mutationFn: async (codigoCompra: string) => {\n      const response = await apiRequest('POST', '/api/admin/fichas/canjear-manual', { codigo_compra: codigoCompra });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ficha canjeada\",\n        description: \"La ficha se ha canjeado manualmente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/fichas'] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo canjear la ficha\",\n      });\n    },\n  });\n\n  const handleQRScan = (data: string) => {\n    try {\n      const qrData = JSON.parse(data);\n      if (qrData.cod_compra) {\n        canjearFichaManual.mutate(qrData.cod_compra);\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"QR inválido\",\n        description: \"El código QR no tiene el formato correcto\",\n      });\n    }\n  };\n\n  const getEstadoBadge = (estado: string) => {\n    const variants = {\n      activo: \"default\",\n      canjeado: \"destructive\",\n      expirado: \"secondary\",\n    } as const;\n    \n    return (\n      <Badge variant={variants[estado as keyof typeof variants] || \"secondary\"}>\n        {estado.charAt(0).toUpperCase() + estado.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Historial de Fichas\n            <Button\n              onClick={() => setIsQRScannerOpen(true)}\n              className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n              data-testid=\"button-escanear-qr\"\n            >\n              <QrCode className=\"w-4 h-4 mr-2\" />\n              Escanear QR\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Filtros */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 p-4 bg-secondary rounded-lg\">\n            <div>\n              <Select value={filtros.estado} onValueChange={(value) => setFiltros(prev => ({ ...prev, estado: value }))}>\n                <SelectTrigger data-testid=\"select-estado\">\n                  <SelectValue placeholder=\"Estado\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Todos</SelectItem>\n                  <SelectItem value=\"activo\">Activo</SelectItem>\n                  <SelectItem value=\"canjeado\">Canjeado</SelectItem>\n                  <SelectItem value=\"expirado\">Expirado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Input\n                type=\"date\"\n                value={filtros.fecha}\n                onChange={(e) => setFiltros(prev => ({ ...prev, fecha: e.target.value }))}\n                data-testid=\"input-fecha\"\n              />\n            </div>\n            \n            <div>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Buscar código...\"\n                  value={filtros.busqueda}\n                  onChange={(e) => setFiltros(prev => ({ ...prev, busqueda: e.target.value }))}\n                  className=\"pl-10\"\n                  data-testid=\"input-busqueda\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button variant=\"outline\" data-testid=\"button-filtrar\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filtrar\n              </Button>\n            </div>\n          </div>\n\n          {/* Tabla */}\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-secondary\">\n                  <TableHead className=\"mobile-visible\">Código</TableHead>\n                  <TableHead className=\"mobile-visible\">Fecha</TableHead>\n                  <TableHead>Cliente</TableHead>\n                  <TableHead>Total</TableHead>\n                  <TableHead>Ficha</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead className=\"mobile-visible\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-kivo-violet mx-auto\"></div>\n                    </TableCell>\n                  </TableRow>\n                ) : historial.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                      No se encontraron registros\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  historial.map((item: any) => (\n                    <TableRow key={item.id} data-testid={`row-${item.codigo_compra}`}>\n                      <TableCell className=\"font-medium mobile-visible\">\n                        {item.codigo_compra}\n                      </TableCell>\n                      <TableCell className=\"mobile-visible\">\n                        {format(new Date(item.creado_en), 'dd/MM/yyyy', { locale: es })}\n                      </TableCell>\n                      <TableCell>{item.nombre_cliente}</TableCell>\n                      <TableCell>{formatearMoneda(parseFloat(item.total))}</TableCell>\n                      <TableCell>\n                        {item.ficha ? (\n                          <Badge variant=\"secondary\">{item.ficha.token.slice(0, 8)}...</Badge>\n                        ) : (\n                          <span className=\"text-muted-foreground text-sm\">Sin ficha</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {item.ficha ? getEstadoBadge(item.ficha.estado) : '-'}\n                      </TableCell>\n                      <TableCell className=\"mobile-visible\">\n                        <div className=\"flex space-x-2\">\n                          {!item.ficha ? (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  size=\"sm\" \n                                  className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                                  data-testid=\"button-generar-ficha\"\n                                >\n                                  Generar\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Generar Ficha</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <p>¿Generar ficha para el pedido {item.codigo_compra}?</p>\n                                  <div className=\"flex space-x-2\">\n                                    <Button\n                                      onClick={() => generarFicha.mutate(item.codigo_compra)}\n                                      disabled={generarFicha.isPending}\n                                      className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                                    >\n                                      Confirmar\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          ) : item.ficha.estado === 'activo' ? (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => canjearFichaManual.mutate(item.codigo_compra)}\n                              disabled={canjearFichaManual.isPending}\n                              data-testid=\"button-canjear-manual\"\n                            >\n                              Canjear\n                            </Button>\n                          ) : (\n                            <Button size=\"sm\" variant=\"outline\" disabled>\n                              {item.ficha.estado === 'canjeado' ? 'Canjeado' : 'Expirado'}\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Paginación */}\n          <div className=\"flex items-center justify-between mt-6\">\n            <div className=\"text-sm text-muted-foreground\">\n              Mostrando 1-10 de {historial.length} registros\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" disabled>\n                Anterior\n              </Button>\n              <Button size=\"sm\" className=\"bg-kivo-violet text-white\">\n                1\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                2\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Siguiente\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <QRScanner\n        isOpen={isQRScannerOpen}\n        onClose={() => setIsQRScannerOpen(false)}\n        onScan={handleQRScan}\n      />\n    </div>\n  );\n}\n","size_bytes":12006},"client/src/components/admin/admin-panel.tsx":{"content":"import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AdminFichas from './admin-fichas';\nimport AdminProductos from './admin-productos';\nimport AdminPromociones from './admin-promociones';\n\nexport default function AdminPanel() {\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"fichas\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"fichas\">Fichas</TabsTrigger>\n          <TabsTrigger value=\"productos\">Productos</TabsTrigger>\n          <TabsTrigger value=\"promociones\">Promociones</TabsTrigger>\n          <TabsTrigger value=\"pedidos\">Pedidos</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"fichas\" className=\"mt-6\">\n          <AdminFichas />\n        </TabsContent>\n\n        <TabsContent value=\"productos\" className=\"mt-6\">\n          <AdminProductos />\n        </TabsContent>\n\n        <TabsContent value=\"promociones\" className=\"mt-6\">\n          <AdminPromociones />\n        </TabsContent>\n\n        <TabsContent value=\"pedidos\" className=\"mt-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Gestión de pedidos en desarrollo</p>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":1277},"client/src/components/admin/admin-productos.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Plus, Edit, Trash2, Upload, Image as ImageIcon } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport type { Producto, InsertProducto } from '@shared/schema';\n\nexport default function AdminProductos() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Producto | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [formData, setFormData] = useState<InsertProducto>({\n    nombre: '',\n    descripcion: '',\n    precio: '0',\n    stock: 0,\n    categoria_id: '',\n    activo: true,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: productos = [], isLoading } = useQuery({\n    queryKey: ['/api/productos/admin'],\n  });\n\n  const { data: categorias = [] } = useQuery({\n    queryKey: ['/api/categorias'],\n  });\n\n  const crearProducto = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch('/api/productos', {\n        method: 'POST',\n        body: data,\n      });\n      if (!response.ok) throw new Error('Error al crear producto');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto creado\",\n        description: \"El producto se ha creado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/productos'] });\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear el producto\",\n      });\n    },\n  });\n\n  const actualizarProducto = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: FormData }) => {\n      const response = await fetch(`/api/productos/${id}`, {\n        method: 'PATCH',\n        body: data,\n      });\n      if (!response.ok) throw new Error('Error al actualizar producto');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto actualizado\",\n        description: \"El producto se ha actualizado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/productos'] });\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo actualizar el producto\",\n      });\n    },\n  });\n\n  const eliminarProducto = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/productos/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto eliminado\",\n        description: \"El producto se ha eliminado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/productos'] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo eliminar el producto\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      nombre: '',\n      descripcion: '',\n      precio: '0',\n      stock: 0,\n      categoria_id: '',\n      activo: true,\n    });\n    setEditingProduct(null);\n    setSelectedFile(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (producto: Producto) => {\n    setEditingProduct(producto);\n    setFormData({\n      nombre: producto.nombre,\n      descripcion: producto.descripcion || '',\n      precio: producto.precio,\n      stock: producto.stock || 0,\n      categoria_id: producto.categoria_id || '',\n      activo: producto.activo || true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const formDataToSend = new FormData();\n    Object.entries(formData).forEach(([key, value]) => {\n      formDataToSend.append(key, value?.toString() || '');\n    });\n    \n    if (selectedFile) {\n      formDataToSend.append('imagen', selectedFile);\n    }\n\n    if (editingProduct) {\n      actualizarProducto.mutate({ id: editingProduct.id, data: formDataToSend });\n    } else {\n      crearProducto.mutate(formDataToSend);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Validar tipo y tamaño\n      const validTypes = ['image/jpeg', 'image/png'];\n      const maxSize = 5 * 1024 * 1024; // 5MB\n      \n      if (!validTypes.includes(file.type)) {\n        toast({\n          variant: \"destructive\",\n          title: \"Tipo de archivo inválido\",\n          description: \"Solo se permiten archivos JPEG y PNG\",\n        });\n        return;\n      }\n      \n      if (file.size > maxSize) {\n        toast({\n          variant: \"destructive\",\n          title: \"Archivo muy grande\",\n          description: \"El archivo no debe superar los 5MB\",\n        });\n        return;\n      }\n      \n      setSelectedFile(file);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Gestión de Productos\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                  data-testid=\"button-nuevo-producto\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nuevo Producto\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingProduct ? 'Editar Producto' : 'Nuevo Producto'}\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"nombre\">Nombre del Producto</Label>\n                      <Input\n                        id=\"nombre\"\n                        value={formData.nombre}\n                        onChange={(e) => setFormData(prev => ({ ...prev, nombre: e.target.value }))}\n                        required\n                        data-testid=\"input-nombre\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"categoria\">Categoría</Label>\n                      <Select \n                        value={formData.categoria_id} \n                        onValueChange={(value) => setFormData(prev => ({ ...prev, categoria_id: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-categoria\">\n                          <SelectValue placeholder=\"Seleccionar categoría\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categorias.map((categoria: any) => (\n                            <SelectItem key={categoria.id} value={categoria.id}>\n                              {categoria.nombre}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"descripcion\">Descripción</Label>\n                    <Textarea\n                      id=\"descripcion\"\n                      value={formData.descripcion}\n                      onChange={(e) => setFormData(prev => ({ ...prev, descripcion: e.target.value }))}\n                      rows={3}\n                      data-testid=\"textarea-descripcion\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"precio\">Precio (BOB)</Label>\n                      <Input\n                        id=\"precio\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={formData.precio}\n                        onChange={(e) => setFormData(prev => ({ ...prev, precio: e.target.value }))}\n                        required\n                        data-testid=\"input-precio\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"stock\">Stock</Label>\n                      <Input\n                        id=\"stock\"\n                        type=\"number\"\n                        min=\"0\"\n                        value={formData.stock}\n                        onChange={(e) => setFormData(prev => ({ ...prev, stock: parseInt(e.target.value) || 0 }))}\n                        data-testid=\"input-stock\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"imagen\">Imagen del Producto</Label>\n                    <div className=\"mt-1 flex items-center space-x-4\">\n                      <Input\n                        id=\"imagen\"\n                        type=\"file\"\n                        accept=\"image/jpeg,image/png\"\n                        onChange={handleFileChange}\n                        className=\"file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-kivo-violet file:text-white hover:file:bg-kivo-violet/90\"\n                        data-testid=\"input-imagen\"\n                      />\n                      {selectedFile && (\n                        <Badge variant=\"secondary\">{selectedFile.name}</Badge>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Solo JPEG/PNG, máximo 5MB\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"activo\"\n                      checked={formData.activo}\n                      onChange={(e) => setFormData(prev => ({ ...prev, activo: e.target.checked }))}\n                      className=\"rounded border-gray-300\"\n                      data-testid=\"checkbox-activo\"\n                    />\n                    <Label htmlFor=\"activo\">Producto activo</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                      Cancelar\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                      disabled={crearProducto.isPending || actualizarProducto.isPending}\n                      data-testid=\"button-guardar\"\n                    >\n                      {(crearProducto.isPending || actualizarProducto.isPending) ? 'Guardando...' : 'Guardar'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-secondary\">\n                  <TableHead>Imagen</TableHead>\n                  <TableHead>Nombre</TableHead>\n                  <TableHead>Categoría</TableHead>\n                  <TableHead>Precio</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-kivo-violet mx-auto\"></div>\n                    </TableCell>\n                  </TableRow>\n                ) : productos.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                      No hay productos registrados\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  productos.map((producto: any) => (\n                    <TableRow key={producto.id} data-testid={`row-${producto.id}`}>\n                      <TableCell>\n                        <div className=\"w-12 h-12 bg-gray-100 rounded flex items-center justify-center\">\n                          {producto.imagenes_productos?.[0] ? (\n                            <img\n                              src={producto.imagenes_productos[0].url_imagen}\n                              alt={producto.nombre}\n                              className=\"w-full h-full object-cover rounded\"\n                            />\n                          ) : (\n                            <ImageIcon className=\"w-6 h-6 text-gray-400\" />\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{producto.nombre}</TableCell>\n                      <TableCell>{producto.categoria?.nombre || 'Sin categoría'}</TableCell>\n                      <TableCell>{formatearMoneda(parseFloat(producto.precio))}</TableCell>\n                      <TableCell>\n                        <Badge variant={producto.stock > 0 ? \"default\" : \"destructive\"}>\n                          {producto.stock}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={producto.activo ? \"default\" : \"secondary\"}>\n                          {producto.activo ? 'Activo' : 'Inactivo'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEdit(producto)}\n                            data-testid=\"button-editar\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-destructive hover:text-destructive/80\"\n                            onClick={() => eliminarProducto.mutate(producto.id)}\n                            disabled={eliminarProducto.isPending}\n                            data-testid=\"button-eliminar\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16072},"client/src/components/admin/admin-promociones.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Plus, Edit, Trash2, Calendar, Percent } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { formatearMoneda } from '@/lib/formatear-moneda';\nimport { useTemporizadorPromo } from '@/hooks/use-temporizador-promo';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport type { Promocion, InsertPromocion } from '@shared/schema';\n\nexport default function AdminPromociones() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPromocion, setEditingPromocion] = useState<Promocion | null>(null);\n  const [formData, setFormData] = useState<InsertPromocion>({\n    producto_id: '',\n    nombre: '',\n    porcentaje_descuento: '0',\n    fecha_inicio: '',\n    fecha_fin: '',\n    activa: true,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: promociones = [], isLoading } = useQuery({\n    queryKey: ['/api/promociones/admin'],\n  });\n\n  const { data: productos = [] } = useQuery({\n    queryKey: ['/api/productos'],\n  });\n\n  const crearPromocion = useMutation({\n    mutationFn: async (data: InsertPromocion) => {\n      const response = await apiRequest('POST', '/api/promociones', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Promoción creada\",\n        description: \"La promoción se ha creado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/promociones'] });\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear la promoción\",\n      });\n    },\n  });\n\n  const actualizarPromocion = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertPromocion> }) => {\n      const response = await apiRequest('PATCH', `/api/promociones/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Promoción actualizada\",\n        description: \"La promoción se ha actualizado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/promociones'] });\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo actualizar la promoción\",\n      });\n    },\n  });\n\n  const eliminarPromocion = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/promociones/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Promoción eliminada\",\n        description: \"La promoción se ha eliminado correctamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/promociones'] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo eliminar la promoción\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      producto_id: '',\n      nombre: '',\n      porcentaje_descuento: '0',\n      fecha_inicio: '',\n      fecha_fin: '',\n      activa: true,\n    });\n    setEditingPromocion(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (promocion: Promocion) => {\n    setEditingPromocion(promocion);\n    setFormData({\n      producto_id: promocion.producto_id || '',\n      nombre: promocion.nombre,\n      porcentaje_descuento: promocion.porcentaje_descuento,\n      fecha_inicio: format(new Date(promocion.fecha_inicio), 'yyyy-MM-dd\\'T\\'HH:mm'),\n      fecha_fin: format(new Date(promocion.fecha_fin), 'yyyy-MM-dd\\'T\\'HH:mm'),\n      activa: promocion.activa || true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingPromocion) {\n      actualizarPromocion.mutate({ id: editingPromocion.id, data: formData });\n    } else {\n      crearPromocion.mutate(formData);\n    }\n  };\n\n  const getEstadoPromocion = (promocion: Promocion) => {\n    const ahora = new Date();\n    const inicio = new Date(promocion.fecha_inicio);\n    const fin = new Date(promocion.fecha_fin);\n    \n    if (!promocion.activa) return { estado: 'Inactiva', variant: 'secondary' as const };\n    if (ahora < inicio) return { estado: 'Programada', variant: 'default' as const };\n    if (ahora > fin) return { estado: 'Expirada', variant: 'destructive' as const };\n    return { estado: 'Activa', variant: 'default' as const };\n  };\n\n  const PromocionTimer = ({ fechaFin }: { fechaFin: string }) => {\n    const tiempoRestante = useTemporizadorPromo(fechaFin);\n    \n    if (tiempoRestante === 'Expirado') {\n      return <Badge variant=\"destructive\">Expirado</Badge>;\n    }\n    \n    return (\n      <Badge className=\"bg-kivo-violet text-white animate-pulse\">\n        {tiempoRestante}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Gestión de Promociones\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                  data-testid=\"button-nueva-promocion\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nueva Promoción\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingPromocion ? 'Editar Promoción' : 'Nueva Promoción'}\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"nombre\">Nombre de la Promoción</Label>\n                    <Input\n                      id=\"nombre\"\n                      value={formData.nombre}\n                      onChange={(e) => setFormData(prev => ({ ...prev, nombre: e.target.value }))}\n                      placeholder=\"Ej: Oferta Especial Verano\"\n                      required\n                      data-testid=\"input-nombre\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"producto\">Producto</Label>\n                    <Select \n                      value={formData.producto_id} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, producto_id: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-producto\">\n                        <SelectValue placeholder=\"Seleccionar producto\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {productos.map((producto: any) => (\n                          <SelectItem key={producto.id} value={producto.id}>\n                            {producto.nombre}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"descuento\">Porcentaje de Descuento (%)</Label>\n                    <Input\n                      id=\"descuento\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"100\"\n                      step=\"0.01\"\n                      value={formData.porcentaje_descuento}\n                      onChange={(e) => setFormData(prev => ({ ...prev, porcentaje_descuento: e.target.value }))}\n                      required\n                      data-testid=\"input-descuento\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"fecha_inicio\">Fecha de Inicio</Label>\n                      <Input\n                        id=\"fecha_inicio\"\n                        type=\"datetime-local\"\n                        value={formData.fecha_inicio}\n                        onChange={(e) => setFormData(prev => ({ ...prev, fecha_inicio: e.target.value }))}\n                        required\n                        data-testid=\"input-fecha-inicio\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"fecha_fin\">Fecha de Fin</Label>\n                      <Input\n                        id=\"fecha_fin\"\n                        type=\"datetime-local\"\n                        value={formData.fecha_fin}\n                        onChange={(e) => setFormData(prev => ({ ...prev, fecha_fin: e.target.value }))}\n                        required\n                        data-testid=\"input-fecha-fin\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"activa\"\n                      checked={formData.activa}\n                      onChange={(e) => setFormData(prev => ({ ...prev, activa: e.target.checked }))}\n                      className=\"rounded border-gray-300\"\n                      data-testid=\"checkbox-activa\"\n                    />\n                    <Label htmlFor=\"activa\">Promoción activa</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                      Cancelar\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"bg-kivo-violet text-white hover:bg-kivo-violet/90\"\n                      disabled={crearPromocion.isPending || actualizarPromocion.isPending}\n                      data-testid=\"button-guardar\"\n                    >\n                      {(crearPromocion.isPending || actualizarPromocion.isPending) ? 'Guardando...' : 'Guardar'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-secondary\">\n                  <TableHead>Nombre</TableHead>\n                  <TableHead>Producto</TableHead>\n                  <TableHead>Descuento</TableHead>\n                  <TableHead>Inicio</TableHead>\n                  <TableHead>Fin</TableHead>\n                  <TableHead>Tiempo Restante</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-kivo-violet mx-auto\"></div>\n                    </TableCell>\n                  </TableRow>\n                ) : promociones.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                      No hay promociones registradas\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  promociones.map((promocion: any) => {\n                    const { estado, variant } = getEstadoPromocion(promocion);\n                    return (\n                      <TableRow key={promocion.id} data-testid={`row-${promocion.id}`}>\n                        <TableCell className=\"font-medium\">{promocion.nombre}</TableCell>\n                        <TableCell>{promocion.producto?.nombre || 'Producto eliminado'}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            {Math.round(parseFloat(promocion.porcentaje_descuento))}%\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {format(new Date(promocion.fecha_inicio), 'dd/MM/yyyy HH:mm', { locale: es })}\n                        </TableCell>\n                        <TableCell>\n                          {format(new Date(promocion.fecha_fin), 'dd/MM/yyyy HH:mm', { locale: es })}\n                        </TableCell>\n                        <TableCell>\n                          {estado === 'Activa' ? (\n                            <PromocionTimer fechaFin={promocion.fecha_fin} />\n                          ) : (\n                            <Badge variant=\"secondary\">-</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={variant}>{estado}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleEdit(promocion)}\n                              data-testid=\"button-editar\"\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-destructive hover:text-destructive/80\"\n                              onClick={() => eliminarPromocion.mutate(promocion.id)}\n                              disabled={eliminarPromocion.isPending}\n                              data-testid=\"button-eliminar\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Estadísticas rápidas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5 text-kivo-violet\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Promociones Activas</p>\n                    <p className=\"text-2xl font-bold text-kivo-violet\">\n                      {promociones.filter((p: any) => getEstadoPromocion(p).estado === 'Activa').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Percent className=\"w-5 h-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Descuento Promedio</p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {promociones.length > 0 \n                        ? Math.round(promociones.reduce((acc: number, p: any) => acc + parseFloat(p.porcentaje_descuento), 0) / promociones.length)\n                        : 0}%\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Programadas</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {promociones.filter((p: any) => getEstadoPromocion(p).estado === 'Programada').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5 text-gray-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Expiradas</p>\n                    <p className=\"text-2xl font-bold text-gray-600\">\n                      {promociones.filter((p: any) => getEstadoPromocion(p).estado === 'Expirada').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17744},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}